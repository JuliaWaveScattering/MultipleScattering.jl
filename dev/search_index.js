var documenterSearchIndex = {"docs":
[{"location":"manual/time_response/#Time-response-1","page":"Time response","title":"Time response","text":"","category":"section"},{"location":"manual/time_response/#","page":"Time response","title":"Time response","text":"details in discrete fourier transform, connection to source function, and impulses.","category":"page"},{"location":"example/hankel_convergence/README/#Convergence-when-increasing-the-number-of-Hankel-functions-1","page":"Convergence when increasing the number of Hankel functions","title":"Convergence when increasing the number of Hankel functions","text":"","category":"section"},{"location":"example/hankel_convergence/README/#","page":"Convergence when increasing the number of Hankel functions","title":"Convergence when increasing the number of Hankel functions","text":"The code convergence.jl tests how fast does the scattered wave (in frequency) converge when increasing the number of Hankel functions. To describe the scattered wave from each particle we use a series of Hankel functions (of the first kind).","category":"page"},{"location":"example/hankel_convergence/README/#","page":"Convergence when increasing the number of Hankel functions","title":"Convergence when increasing the number of Hankel functions","text":"include(\"convergence.jl\")\nsimulations = hankel_order_convergence()\nplot_hankel_order_convergence(simulations)\n","category":"page"},{"location":"example/hankel_convergence/README/#","page":"Convergence when increasing the number of Hankel functions","title":"Convergence when increasing the number of Hankel functions","text":"(Image: Plot lens shape and response in time)","category":"page"},{"location":"example/hankel_convergence/README/#","page":"Convergence when increasing the number of Hankel functions","title":"Convergence when increasing the number of Hankel functions","text":"In the figures above m is the maximum order of the Hankel functions. The top left figure shows the configuration of particles considered.  ","category":"page"},{"location":"manual/shapes/#Shapes-and-particles-1","page":"Shapes and particles","title":"Shapes and particles","text":"","category":"section"},{"location":"manual/shapes/#Existing-shapes-1","page":"Shapes and particles","title":"Existing shapes","text":"","category":"section"},{"location":"manual/shapes/#","page":"Shapes and particles","title":"Shapes and particles","text":"The package provides 3 built in basic shapes to put your random particles in, you can plot them using:","category":"page"},{"location":"manual/shapes/#","page":"Shapes and particles","title":"Shapes and particles","text":"using MultipleScattering\n\nrectangle = Rectangle([0.0,-1.0],[1.0,2.0])\ncircle = Circle([-1.0,0.0],1.0)\ntimeofflight = TimeOfFlight([1.0,0.0],3.0)\n\nusing Plots; pyplot()\nplot(rectangle, linecolor = :red)\nplot!(circle, linecolor = :green)\nplot!(timeofflight, linecolor = :blue)","category":"page"},{"location":"manual/shapes/#","page":"Shapes and particles","title":"Shapes and particles","text":"(Image: Plot the three shapes)","category":"page"},{"location":"manual/shapes/#","page":"Shapes and particles","title":"Shapes and particles","text":"Time of flight is a shape which contains shapes from a half space which take at most t time to reach from the listener.","category":"page"},{"location":"manual/shapes/#New-shape-1","page":"Shapes and particles","title":"New shape","text":"","category":"section"},{"location":"manual/shapes/#","page":"Shapes and particles","title":"Shapes and particles","text":"If you are feeling very adventurous, you can define your own shape First you must import the package in order to add to existing functions","category":"page"},{"location":"manual/shapes/#","page":"Shapes and particles","title":"Shapes and particles","text":"import MultipleScattering\n\ntype MyShape <: MultipleScattering.Shape\nend","category":"page"},{"location":"manual/shapes/#","page":"Shapes and particles","title":"Shapes and particles","text":"To describe the characteristics and behaviour of the function you must define the following functions:","category":"page"},{"location":"manual/shapes/#","page":"Shapes and particles","title":"Shapes and particles","text":"MultipleScattering.volume(shape::MyShape) = 0.0\n\nMultipleScattering.name(shape::MyShape) = \"MyShape\"\n\nMultipleScattering.bounding_box(shape::MyShape) = MultipleScattering.Rectangle()","category":"page"},{"location":"manual/shapes/#","page":"Shapes and particles","title":"Shapes and particles","text":"When you have this, you can make use of your shape to generate particles in it","category":"page"},{"location":"example/box_size/README/#Box-size-1","page":"Box size","title":"Box size","text":"","category":"section"},{"location":"example/box_size/README/#","page":"Box size","title":"Box size","text":"If we are only interested in the response at a specific location for a certain time interval, we need only simulate particles which are this distance (or time) away from the listener.","category":"page"},{"location":"example/plot/README/#Make-a-gif-of-a-time-harmonic-wave-1","page":"Make a gif of a time-harmonic wave","title":"Make a gif of a time-harmonic wave","text":"","category":"section"},{"location":"example/plot/README/#","page":"Make a gif of a time-harmonic wave","title":"Make a gif of a time-harmonic wave","text":"using MultipleScattering\nusing Plots; pyplot(linewidth=2.0)\n\nnum_particles = 70\nradius = 1.0\nω = 1.0\n\nhost_medium = Acoustic(1.0, 1.0, 2)\nparticle_medium = Acoustic(0.2, 0.3, 2)\nparticle_shape = Circle(radius)\n\nmax_width = 50*radius\nbottomleft = [0.,-max_width]\ntopright = [max_width,max_width]\nshape = Rectangle(bottomleft,topright)\n\nparticles = random_particles(particle_medium, particle_shape; box_shape = shape, num_particles = num_particles)\n\nsource =  plane_source(host_medium; direction = [1.0,0.5])\n\nsimulation = FrequencySimulation(host_medium, particles, source)\n\nbottomleft = [-25.,-max_width]\nbounds = Rectangle(bottomleft,topright)\nresult = run(simulation, bounds, [ω]; res=100)\n\nts = LinRange(0.,2pi/ω,30)\n\nmaxc = round(10*maximum(real.(field(result))))/10\nminc = round(10*minimum(real.(field(result))))/10\n\nanim = @animate for t in ts\n    plot(result,ω; seriestype = :contour, time=t, clim=(minc,maxc), c=:balance)\n    plot!(simulation)\n    plot!(colorbar=false, title=\"\",axis=false, xlab=\"\",ylab=\"\")\nend\n#\ngif(anim,\"backscatter_harmonic.gif\", fps = 7)","category":"page"},{"location":"example/plot/README/#","page":"Make a gif of a time-harmonic wave","title":"Make a gif of a time-harmonic wave","text":"(Image: backscattering from harmonic wave)","category":"page"},{"location":"example/two_particles/README/#Two-particles-1","page":"Two particles","title":"Two particles","text":"","category":"section"},{"location":"example/two_particles/README/#","page":"Two particles","title":"Two particles","text":"Define two particles with the first centred at [1.,-2.], with radius 1.0, sound speed 2.0 and density 10.0","category":"page"},{"location":"example/two_particles/README/#","page":"Two particles","title":"Two particles","text":"using MultipleScattering\nusing Plots\npyplot()\n\np1 = Particle([1.,-4.], 1.0; c = 20.0+0.0im, ρ = 10.)\np2 = Particle([3.,3.],  3.0; c = 1.0+0.0im, ρ = 0.1)\nparticles = [p1,p2]","category":"page"},{"location":"example/two_particles/README/#","page":"Two particles","title":"Two particles","text":"Specify the angular frequency of the incident wave and calculate the response","category":"page"},{"location":"example/two_particles/README/#","page":"Two particles","title":"Two particles","text":"w_arr = collect(0.1:0.01:1.)\nsimulation = FrequencySimulation(particles, w_arr)\nplot(simulation)","category":"page"},{"location":"example/two_particles/README/#","page":"Two particles","title":"Two particles","text":"(Image: Plot against frequency)","category":"page"},{"location":"example/two_particles/README/#","page":"Two particles","title":"Two particles","text":"The above used an incident plane with the default reciever/listener position and incident plane wave direction","category":"page"},{"location":"example/two_particles/README/#","page":"Two particles","title":"Two particles","text":"simulation.listener_positions\nsimulation.source_direction","category":"page"},{"location":"example/two_particles/README/#","page":"Two particles","title":"Two particles","text":"to change these defaults use","category":"page"},{"location":"example/two_particles/README/#","page":"Two particles","title":"Two particles","text":"simulation = FrequencySimulation(particles, w_arr;\n    listener_positions = [-10.,-10.],\n    source_direction=[1.,1.])","category":"page"},{"location":"example/two_particles/README/#","page":"Two particles","title":"Two particles","text":"then plot the response around the particles and receiver","category":"page"},{"location":"example/two_particles/README/#","page":"Two particles","title":"Two particles","text":"w = 3.2\nplot(simulation,w; res=80, resp_fnc=abs)","category":"page"},{"location":"example/two_particles/README/#","page":"Two particles","title":"Two particles","text":"(Image: Plot absolute value of wave field)","category":"page"},{"location":"example/two_particles/README/#","page":"Two particles","title":"Two particles","text":"the green circle in the plot is the receiver position. Looking at the region between the particles we see the complicated results of multiple scatttering.","category":"page"},{"location":"example/intro/README/#[Go-to-introductory-example](https://github.com/jondea/MultipleScattering.jl).-1","page":"Go to introductory example.","title":"Go to introductory example.","text":"","category":"section"},{"location":"example/near_surface_backscattering/README/#Near-surface-backscattering-1","page":"Near-surface backscattering","title":"Near-surface backscattering","text":"","category":"section"},{"location":"example/near_surface_backscattering/README/#","page":"Near-surface backscattering","title":"Near-surface backscattering","text":"Near-surface backscattering is a method of accurately calculating the backscattering from an infinite halfspace. For just the code see backscattering.jl First, let us see why it is difficult to approximate the scattering from a halfspace filled with particles. That is, let us find out how many particles are required before the backscattering converges.","category":"page"},{"location":"example/near_surface_backscattering/README/#Generate-a-large-material-filled-with-particles.-1","page":"Near-surface backscattering","title":"Generate a large material filled with particles.","text":"","category":"section"},{"location":"example/near_surface_backscattering/README/#","page":"Near-surface backscattering","title":"Near-surface backscattering","text":"using MultipleScattering\n\nhost_medium = Acoustic(1.0, 1.0, 2)\n\nradius = 0.8\nvolfrac = 0.10\nmax_width = 70.\n\nparticle_medium = Acoustic(0.2, 0.1, 2)\nparticle_shape = Circle(radius)\n\nbottomleft = [0.,-max_width]\ntopright = [max_width,max_width]\n\nshape = Rectangle(bottomleft,topright)\nparticles = random_particles(particle_medium, particle_shape; box_shape = shape, volume_fraction = volfrac)","category":"page"},{"location":"example/near_surface_backscattering/README/#","page":"Near-surface backscattering","title":"Near-surface backscattering","text":"We send an incoming harmonic plane wave and receive the backscattering at x:","category":"page"},{"location":"example/near_surface_backscattering/README/#","page":"Near-surface backscattering","title":"Near-surface backscattering","text":"using Plots\npyplot(linewidth=2)\n\nx = [-10.,0.]\nsource =  plane_source(host_medium; position = x,\n        direction = [1.0,0.],\n        amplitude = 1.0)\n\nplot(particles)\nscatter!([x[1]],[x[2]], lab=\"\")\nannotate!([(x[1], x[2] -max_width/10., \"Receiver\")])\nplot!(shape, linecolor = :red)","category":"page"},{"location":"example/near_surface_backscattering/README/#","page":"Near-surface backscattering","title":"Near-surface backscattering","text":"(Image: The largest quantity of particles used)","category":"page"},{"location":"example/near_surface_backscattering/README/#Calculate-backscattering-for-different-quantity-of-particles-1","page":"Near-surface backscattering","title":"Calculate backscattering for different quantity of particles","text":"","category":"section"},{"location":"example/near_surface_backscattering/README/#","page":"Near-surface backscattering","title":"Near-surface backscattering","text":"We will shave off particles on the right of this group of particles (above), and then calculate the backscattered waves for a range of angular frequencies ωs.","category":"page"},{"location":"example/near_surface_backscattering/README/#","page":"Near-surface backscattering","title":"Near-surface backscattering","text":"ωs = collect(0.01:0.01:1.)\nwidths = 10.:5.:max_width\nnum_particles = zeros(length(widths))\n\nresults = map(eachindex(widths)) do i\n    bottomleft = [0.,-widths[i]]\n    topright = [widths[i],widths[i]]\n    shape = Rectangle(bottomleft, topright)\n\n    ps = filter(p -> p ⊆ shape, particles) # select particles that are inside shape\n    num_particles[i] = Int(length(ps))\n\n    simulation = FrequencySimulation(host_medium, ps, source)\n    run(simulation, x, ωs)\nend\n\nbackscattered_waves = field.(results)\n\nM = length(backscattered_waves)\nbM = backscattered_waves[M] # backscattering from largest material\ndifferences = [norm(b - bM) for b in backscattered_waves[1:(M-1)]]./norm(bM)\n\nplot_converge = plot(num_particles[1:(M-1)], differences,\n    xlabel = \"number of particles\", ylabel =\"error %\",\n    label=\"frequency convergence\"\n)","category":"page"},{"location":"example/near_surface_backscattering/README/#","page":"Near-surface backscattering","title":"Near-surface backscattering","text":"(Image: The convergence of the response in frequency, when increasing the number of particles)","category":"page"},{"location":"example/near_surface_backscattering/README/#","page":"Near-surface backscattering","title":"Near-surface backscattering","text":"The graph shows the rate of convergence, that is, how much the backscattering changes when including more particles (making the material deeper). The graph has not clearly converged, so we can only conclude that more than 400 particles are needed to accurately approximate the backscattering from an infinite halfspace.","category":"page"},{"location":"example/near_surface_backscattering/README/#","page":"Near-surface backscattering","title":"Near-surface backscattering","text":"We can accelerate this convergence by considering backscattering in time.","category":"page"},{"location":"example/near_surface_backscattering/README/#Calculate-backscattering-in-time-1","page":"Near-surface backscattering","title":"Calculate backscattering in time","text":"","category":"section"},{"location":"example/near_surface_backscattering/README/#","page":"Near-surface backscattering","title":"Near-surface backscattering","text":"time_simulations = frequency_to_time.(results)\nreceiver = results[1].x[1]\ntimes = 2*(widths .- receiver[1]) # time it takes for an incident plane wave to reach the furthest particles and then return to the receiver\n\nplot()\nfor i in [1,3,6,9,12,13]\n    plot!(time_simulations[i],label=\"$(num_particles[i]) particles\"\n        , xlims=(0,maximum(times)+10.), ylims=(-0.2,0.1)\n        , xticks = [0.; 30.; times]\n    )\nend\ngui()","category":"page"},{"location":"example/near_surface_backscattering/README/#","page":"Near-surface backscattering","title":"Near-surface backscattering","text":"(Image: The responses in time for different quantity of particles)","category":"page"},{"location":"example/near_surface_backscattering/README/#","page":"Near-surface backscattering","title":"Near-surface backscattering","text":"We see that the responses in time diverge from each other more and more as time goes by. Meaning that if we only calculate the response for a short amount of time 34, then the convergence will be accelerated.","category":"page"},{"location":"example/near_surface_backscattering/README/#","page":"Near-surface backscattering","title":"Near-surface backscattering","text":"time_vec = 0.:pi:34.2\ntime_results = frequency_to_time.(results; t_vec = time_vec, impulse = GaussianImpulse(maximum(ωs)))\n\nbackscattered_waves = field.(time_results)\nbM = backscattered_waves[M] # backscattering from largest material\ndifferences = [norm(b - bM) for b in backscattered_waves[1:(M-1)]]./norm(bM)\nplot(plot_converge)\nplot!(num_particles[1:(M-1)], differences, xlabel = \"number of particles\", ylabel =\"error %\", label=\"time convergence\")","category":"page"},{"location":"example/near_surface_backscattering/README/#","page":"Near-surface backscattering","title":"Near-surface backscattering","text":"(Image: Compare converges for responses in time and responses in frequency)","category":"page"},{"location":"example/near_surface_backscattering/README/#","page":"Near-surface backscattering","title":"Near-surface backscattering","text":"The convergence of the time response, for time 0<t<34, is much faster. In fact, less than 100 particles are needed to accurately approximate the backscattering from an infinite halfspace. The reason we don't show these as log plots is because there is a small constant error (about 0.01%) due to the discrete Fourier transform. This error is caused by the Gibbs phenomena and by assuming the backscattering is periodic (when it is not). Both these errors are well understood and can be controlled.","category":"page"},{"location":"example/near_surface_backscattering/README/#Calculate-backscattering-only-from-near-surface-particles-1","page":"Near-surface backscattering","title":"Calculate backscattering only from near-surface particles","text":"","category":"section"},{"location":"example/near_surface_backscattering/README/#","page":"Near-surface backscattering","title":"Near-surface backscattering","text":"This last step is about efficiency. We want to only include particle which contribute to the backscattering for short time intervals. To do this we created a region called TimeOfFlight(listener,time), where every particle in this shape takes less than time for their first scattered wave (due to an incident plane wave) to return to the listener.  More precisely, if listener = (lx,ly), then every point (x,y) inside this shape satisfies: x-lx+((x-lx)^2+(y-ly)^2)^(1/2)<time and x>0.","category":"page"},{"location":"example/near_surface_backscattering/README/#","page":"Near-surface backscattering","title":"Near-surface backscattering","text":"For example, look at the largest quantity of particle we used","category":"page"},{"location":"example/near_surface_backscattering/README/#","page":"Near-surface backscattering","title":"Near-surface backscattering","text":"listener_position = [-10.,0.]\nshape = TimeOfFlight(listener_position,80.0)\nscatter([listener_position[1]],[listener_position[2]]);\nannotate!([(listener_position[1], listener_position[2] -max_width/10., \"Receiver\")])\nplot!.(particles);\nplot!(shape)","category":"page"},{"location":"example/near_surface_backscattering/README/#","page":"Near-surface backscattering","title":"Near-surface backscattering","text":"(Image: Shows the particles in the shape TimeOfFlight)","category":"page"},{"location":"example/near_surface_backscattering/README/#","page":"Near-surface backscattering","title":"Near-surface backscattering","text":"For time 0<t<80 the backscattering from these particles is the same as an infinite halfspace filled with particles. To achieve this result we need only the particles inside the shape TimeOfFlight (region with the red outline). The particles outside this shape were unnecessary. To see this inaction:","category":"page"},{"location":"example/near_surface_backscattering/README/#","page":"Near-surface backscattering","title":"Near-surface backscattering","text":"times = 40.:15.:80.\nnear_surface_simulations = map(times) do t\n    shape = TimeOfFlight(receiver,t) # choose a material with particles only in the near surface region\n    ps = filter(p -> p ⊆ shape, particles) # select particles that are inside shape\n    run(FrequencySimulation(host_medium, ps, source), x, ωs) # calculate backscattering\nend\n\ntime_near_simulations = frequency_to_time.(near_surface_simulations; impulse = GaussianImpulse(maximum(ωs)))\n\nplot()\nfor i in 1:length(times)\n    plot!(time_near_simulations[i],label=\"time of flight $(times[i])\"\n        , xlims=(0,maximum(times)+10.), ylims=(-0.6,0.3)\n        , xticks = [0.; times], title=\"\"\n    )\nend\ngui()","category":"page"},{"location":"example/near_surface_backscattering/README/#","page":"Near-surface backscattering","title":"Near-surface backscattering","text":"(Image: Response from particles in the shapes TimeOfFlight)","category":"page"},{"location":"example/near_surface_backscattering/README/#","page":"Near-surface backscattering","title":"Near-surface backscattering","text":"Note the incident pulse has a thickness of about 10 in time, which is why the time of flight 40 diverges from the other curves slightly before time 40, and likewise for the other curves.","category":"page"},{"location":"example/particles_in_circle/README/#Random-particles-in-a-circle-1","page":"Random particles in a circle","title":"Random particles in a circle","text":"","category":"section"},{"location":"example/particles_in_circle/README/#","page":"Random particles in a circle","title":"Random particles in a circle","text":"The code particlesincircle.jl compares the scattered wave from one big circle, with the scattered wave from a circle filled with small particles.","category":"page"},{"location":"example/particles_in_circle/README/#","page":"Random particles in a circle","title":"Random particles in a circle","text":"using MultipleScattering\n\n#You can also pick your own shape, an generate random particles inside it\n#with a certain radius ands volume fraction\nradius = 0.3\nvolfrac = 0.45\ncentre = [0.,0.]\nbig_radius = 3.0\n\nparticle_medium = Acoustic(2; ρ=0.0, c=0.0) # 2D particle with density ρ = 0.0 and soundspeed c = 0.0\nparticle_shape = Circle(radius)\n\ncircle = Circle(centre, big_radius)\n\nparticles = random_particles(particle_medium, particle_shape; box_shape = circle, volume_fraction = volfrac, seed=1)\n\nx = [-10.,0.] # position to receive the reflected wave\nhost_medium = Acoustic(2; ρ=1.0, c=1.0)\nsource =  plane_source(host_medium; position = x, direction = [1.0,0.])\nsimulation = FrequencySimulation(host_medium, particles, source)","category":"page"},{"location":"example/particles_in_circle/README/#","page":"Random particles in a circle","title":"Random particles in a circle","text":"The particles chosen are impenetrable, i.e. the wave is 100\\% reflected. So this circle filled with scatterers should act like one big particle.","category":"page"},{"location":"example/particles_in_circle/README/#","page":"Random particles in a circle","title":"Random particles in a circle","text":"big_particle = Particle(particle_medium, circle)\nbig_particle_simulation = FrequencySimulation(host_medium, [big_particle], source)\n\n#define a bounding box for plot\n    bottomleft = [-10, -2*big_radius]\n    topright = [big_radius, 2*big_radius]\n    box = Rectangle(bottomleft, topright)\n\nusing Plots\nheight = 300\n#gr(size=(1.4*height,height))\npyplot(leg=false, size=(1.4*height,height))\n\nω = 0.5\nplot(big_particle_simulation, ω; res=15, bounds = box);\nplot!(big_particle)\n\n#savefig(\"plot_field_big.png\")\n\nplot(simulation, ω; res=15, bounds = box);\nplot!(particles, linecolor = :green)\n\n#savefig(\"plot_field.png\")","category":"page"},{"location":"example/particles_in_circle/README/#","page":"Random particles in a circle","title":"Random particles in a circle","text":"Resulting in the figures:","category":"page"},{"location":"example/particles_in_circle/README/#","page":"Random particles in a circle","title":"Random particles in a circle","text":"(Image: The field with big particle) (Image: The field with particles)","category":"page"},{"location":"example/particles_in_circle/README/#","page":"Random particles in a circle","title":"Random particles in a circle","text":"If we compare the response measured at the listener [-10., 0.], they should be very similar:","category":"page"},{"location":"example/particles_in_circle/README/#","page":"Random particles in a circle","title":"Random particles in a circle","text":"#define angular frequency range\nωs = collect(LinRange(0.1,1.0,10))\nresult = run(simulation, x, ωs)\nbig_result = run(big_particle_simulation, x, ωs)\n\nplot(result, lab = \"scattering from particles\")\nplot!(big_result,\n    lab = \"scattering from big particle\",\n    title=\"Compare scattered wave from one big particle, \\n and a circle filled with small particles\")","category":"page"},{"location":"example/particles_in_circle/README/#","page":"Random particles in a circle","title":"Random particles in a circle","text":"(Image: The response comparison)","category":"page"},{"location":"example/random_particles/README/#Simple-random-particles-example-1","page":"Simple random particles example","title":"Simple random particles example","text":"","category":"section"},{"location":"example/random_particles/README/#","page":"Simple random particles example","title":"Simple random particles example","text":"If it isn't installed, clone it from github","category":"page"},{"location":"example/random_particles/README/#","page":"Simple random particles example","title":"Simple random particles example","text":"try using MultipleScattering\ncatch\n    Pkg.clone(\"https://github.com/jondea/MultipleScattering.jl.git\")\nend\n\nusing MultipleScattering","category":"page"},{"location":"example/random_particles/README/#Define-particle-properties-1","page":"Simple random particles example","title":"Define particle properties","text":"","category":"section"},{"location":"example/random_particles/README/#","page":"Simple random particles example","title":"Simple random particles example","text":"Define the volume fraction of particles, the region to place the particles, and their radius","category":"page"},{"location":"example/random_particles/README/#","page":"Simple random particles example","title":"Simple random particles example","text":"num_particles = 4\nradius = 1.0\n\nparticle_medium = Acoustic(2; ρ=0.2, c=0.1) # 2D particle with density ρ = 0.2 and soundspeed c = 0.1\nparticle_shape = Circle(radius)\n\nmax_width = 20*radius\nbottomleft = [0.,-max_width]\ntopright = [max_width,max_width]\nbox_shape = Rectangle(bottomleft,topright)\n\nparticles = random_particles(particle_medium, particle_shape; box_shape = box_shape, num_particles = num_particles)","category":"page"},{"location":"example/random_particles/README/#","page":"Simple random particles example","title":"Simple random particles example","text":"Now choose the receiver position x, the host medium, set plane wave as a source wave, and choose the angular frequency range ωs","category":"page"},{"location":"example/random_particles/README/#","page":"Simple random particles example","title":"Simple random particles example","text":"x = [-10.,0.]\nhost_medium = Acoustic(2; ρ=1.0, c=1.0)\nsource =  plane_source(host_medium; position = x, direction = [1.0,0.])\n\nωs = LinRange(0.01,1.0,100)\n\nsimulation = FrequencySimulation(host_medium, particles, source)\nresult = run(simulation, x, ωs)","category":"page"},{"location":"example/random_particles/README/#","page":"Simple random particles example","title":"Simple random particles example","text":"We use the Plots package to plot both the response at the listener position x","category":"page"},{"location":"example/random_particles/README/#","page":"Simple random particles example","title":"Simple random particles example","text":"    using Plots; pyplot(linewidth = 2.0) \n    plot(result, apply=real) # plot result\n    plot!(result, apply=imag)\n    #savefig(\"plot_result.png\")","category":"page"},{"location":"example/random_particles/README/#","page":"Simple random particles example","title":"Simple random particles example","text":"(Image: Plot of response against wavenumber)","category":"page"},{"location":"example/random_particles/README/#","page":"Simple random particles example","title":"Simple random particles example","text":"And plot the whole field inside the box_shape bounds for a specific wavenumber (ω=0.8)","category":"page"},{"location":"example/random_particles/README/#","page":"Simple random particles example","title":"Simple random particles example","text":"    bottomleft = [-15.,-max_width]\n    topright = [max_width,max_width]\n    bounds = Rectangle(bottomleft,topright)\n\n    plot(simulation,0.8; res=80, bounds=bounds)\n    plot!(box_shape, linecolor=:red)\n    plot!(simulation)\n    scatter!([x[1]],[x[2]], lab=\"receiver\")\n\n    #savefig(\"plot_field.png\")","category":"page"},{"location":"example/random_particles/README/#","page":"Simple random particles example","title":"Simple random particles example","text":"(Image: Plot real part of acoustic field)","category":"page"},{"location":"example/random_particles/README/#Things-to-try-1","page":"Simple random particles example","title":"Things to try","text":"","category":"section"},{"location":"example/random_particles/README/#","page":"Simple random particles example","title":"Simple random particles example","text":"Try changing the volume fraction, particle radius and ω values we evaluate","category":"page"},{"location":"library/base/#Base-1","page":"Base","title":"Base","text":"","category":"section"},{"location":"library/base/#","page":"Base","title":"Base","text":"CurrentModule = MultipleScattering","category":"page"},{"location":"library/base/#","page":"Base","title":"Base","text":"Pages = [\"base.md\"]","category":"page"},{"location":"library/base/#base_shapes-1","page":"Base","title":"Shapes","text":"","category":"section"},{"location":"library/base/#","page":"Base","title":"Base","text":"Shape types and functions.","category":"page"},{"location":"library/base/#","page":"Base","title":"Base","text":"Shape\norigin\niscongruent(::Shape,::Shape)\ncongruent\nbounding_rectangle\nboundary_functions\nname\nouter_radius\nvolume\nCircle\nRectangle\nTimeOfFlightFromPoint\nTimeOfFlight\nSphere","category":"page"},{"location":"library/base/#MultipleScattering.Shape","page":"Base","title":"MultipleScattering.Shape","text":"Abstract idea which defines the external boundary of object.\n\n\n\n\n\n","category":"type"},{"location":"library/base/#MultipleScattering.origin","page":"Base","title":"MultipleScattering.origin","text":"origin(shape::Shape)::SVector\n\nOrigin of shape, typically the center\n\n\n\n\n\n","category":"function"},{"location":"library/base/#MultipleScattering.iscongruent-Tuple{Shape,Shape}","page":"Base","title":"MultipleScattering.iscongruent","text":"iscongruent(p1::Shape, p2::Shape)::Bool\n≅(p1::Shape, p2::Shape)::Bool\n\nTrue if shapes are the same but in different positions (origins), standard mathematical definition.\n\n\n\n\n\n","category":"method"},{"location":"library/base/#MultipleScattering.congruent","page":"Base","title":"MultipleScattering.congruent","text":"congruent(s::Shape, x)::Shape\n\nCreate shape congruent to s but with origin at x\n\n\n\n\n\n","category":"function"},{"location":"library/base/#MultipleScattering.bounding_rectangle","page":"Base","title":"MultipleScattering.bounding_rectangle","text":"Returns rectangle which completely encloses the shapes\n\n\n\n\n\n","category":"function"},{"location":"library/base/#MultipleScattering.boundary_functions","page":"Base","title":"MultipleScattering.boundary_functions","text":"volume(shape::Shape)::NTuple{Function,Dim)\n\nReturns Tuple of Dim Functions which define outer boundary of shape when given boundary coordinate t∈[0,1]\n\n\n\n\n\n","category":"function"},{"location":"library/base/#MultipleScattering.name","page":"Base","title":"MultipleScattering.name","text":"name(shape::Shape)::String\n\nName of a shape\n\n\n\n\n\n","category":"function"},{"location":"library/base/#MultipleScattering.outer_radius","page":"Base","title":"MultipleScattering.outer_radius","text":"outer_radius(shape::Shape{T})::T\n\nThe radius of a circle which completely contains the shape\n\n\n\n\n\n","category":"function"},{"location":"library/base/#MultipleScattering.volume","page":"Base","title":"MultipleScattering.volume","text":"volume(shape::Shape{T})::T\n\nVolume of a shape\n\n\n\n\n\n","category":"function"},{"location":"library/base/#MultipleScattering.Circle","page":"Base","title":"MultipleScattering.Circle","text":"Circle([origin=zeros(),] radius)\n\n2D Shape where boundary is a fixed distance from the origin.\n\n\n\n\n\n","category":"type"},{"location":"library/base/#MultipleScattering.Rectangle","page":"Base","title":"MultipleScattering.Rectangle","text":"Rectangle([origin::AbstractVector{T}=zeros(),] width::T, Height::T)\nRectangle(bottomleft::AbstractVector{T}, topright::AbstractVector{T})\n\n2D Shape with axis aligned sides, defined by width, height and origin (at the center).\n\n\n\n\n\n","category":"type"},{"location":"library/base/#MultipleScattering.TimeOfFlightFromPoint","page":"Base","title":"MultipleScattering.TimeOfFlightFromPoint","text":"A shape where anything inside could cause a disturbance at the listener position from a point source wavefront starting at the listener. Also everything inside has a positive x coordinate. It is equivalent to a segment of a circle.\n\nMore precisely, if the listener is at (lx,ly) then the interior of the shape is defined as sqrt((x-lx)^2+(y-ly)^2)<time and x>0\n\n\n\n\n\n","category":"type"},{"location":"library/base/#MultipleScattering.TimeOfFlight","page":"Base","title":"MultipleScattering.TimeOfFlight","text":"A shape where anything inside could cause a disturbance at the listener position from a planar wavefront parallel to the y axis starting at the listener. Also everything inside has a positive x coordinate.\n\nMore precisely, if the listener is at (lx,ly) then the interior of the shape is defined as x-lx+sqrt((x-lx)^2+(y-l_y)^2)<time and x>0\n\n\n\n\n\n","category":"type"},{"location":"library/base/#MultipleScattering.Sphere","page":"Base","title":"MultipleScattering.Sphere","text":"Sphere([origin=zeros(),] radius)\n\n3D Shape where boundary is a fixed distance from the origin.\n\n\n\n\n\n","category":"type"},{"location":"library/base/#Physical-properties-1","page":"Base","title":"Physical properties","text":"","category":"section"},{"location":"library/base/#","page":"Base","title":"Base","text":"Physical properties types and functions.","category":"page"},{"location":"library/base/#","page":"Base","title":"Base","text":"PhysicalProperties\nfield_dim\ndim\nbasis_function\ninternal_field\nboundary_data","category":"page"},{"location":"library/base/#MultipleScattering.PhysicalProperties","page":"Base","title":"MultipleScattering.PhysicalProperties","text":"Holds information about the physical properties of the medium, the dimension of the field and the number of dimensions it is a function of.\n\n\n\n\n\n","category":"type"},{"location":"library/base/#MultipleScattering.field_dim","page":"Base","title":"MultipleScattering.field_dim","text":"Extract the dimension of the field of this physical property\n\n\n\n\n\nExtract the dimension of the field of this type of physical property\n\n\n\n\n\n","category":"function"},{"location":"library/base/#MultipleScattering.dim","page":"Base","title":"MultipleScattering.dim","text":"Extract the dimension of the space that this physical property lives in\n\n\n\n\n\nExtract the dimension of the space that this type of physical property lives in\n\n\n\n\n\n","category":"function"},{"location":"library/base/#MultipleScattering.basis_function","page":"Base","title":"MultipleScattering.basis_function","text":"Basis functions in a specific dimension for a specific physics type.\n\n\n\n\n\nBasis function when inside a particle. Assumes particle is a circle, which approximately works for all shapes.\n\n\n\n\n\n","category":"function"},{"location":"library/base/#MultipleScattering.internal_field","page":"Base","title":"MultipleScattering.internal_field","text":"the field inside an AbstractParticle a some given point x.\n\n\n\n\n\n","category":"function"},{"location":"library/base/#MultipleScattering.boundary_data","page":"Base","title":"MultipleScattering.boundary_data","text":"A tuples of vectors of the field close to the boundary of the shape. The field is calculated from sim::FrequencySimulation, but the PhysicalProperties inside and outside of the shape are assumed to be given by insidemedium and outsidemedium.\n\n\n\n\n\n","category":"function"},{"location":"library/base/#Particles-1","page":"Base","title":"Particles","text":"","category":"section"},{"location":"library/base/#","page":"Base","title":"Base","text":"Particle types and functions.","category":"page"},{"location":"library/base/#","page":"Base","title":"Base","text":"AbstractParticle\nParticle\nCapsuleParticle\niscongruent(::AbstractParticle,::AbstractParticle)","category":"page"},{"location":"library/base/#MultipleScattering.AbstractParticle","page":"Base","title":"MultipleScattering.AbstractParticle","text":"Object we can scatter waves off\n\nSubtypes will contain information about shape and material properties. Most crucially, they will implement the t_matrix function\n\n\n\n\n\n","category":"type"},{"location":"library/base/#MultipleScattering.Particle","page":"Base","title":"MultipleScattering.Particle","text":"Particle(medium::PhysicalProperties, shape::Shape)\n\nCreate particle with inner medium and shape (types and dimension must agree).\n\n\n\n\n\n","category":"type"},{"location":"library/base/#MultipleScattering.CapsuleParticle","page":"Base","title":"MultipleScattering.CapsuleParticle","text":"CapsuleParticle(outer::Particle, inner::Particle)\n\nA particle within another particle, both with the same shape type and origin.\n\n\n\n\n\n","category":"type"},{"location":"library/base/#MultipleScattering.iscongruent-Tuple{AbstractParticle,AbstractParticle}","page":"Base","title":"MultipleScattering.iscongruent","text":"iscongruent(p1::AbstractParticle, p2::AbstractParticle)::Bool\n≅(p1::AbstractParticle, p2::AbstractParticle)::Bool\n\nReturns true if medium and shape of particles are the same, ignoring origin, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"library/base/#Source-1","page":"Base","title":"Source","text":"","category":"section"},{"location":"library/base/#","page":"Base","title":"Base","text":"Source types and functions.","category":"page"},{"location":"library/base/#","page":"Base","title":"Base","text":"Source\nself_test","category":"page"},{"location":"library/base/#MultipleScattering.Source","page":"Base","title":"MultipleScattering.Source","text":"Source{P,T}(field::Function,coef::Function) where P<:PhysicalProperties{T,Dim,FieldDim}\n\nA struct which describes the source that drives/forces the whole system. It is also described as an incident wave.\n\nx = [1.0,0.0]\nω = 1.0\nSource.field(x,ω)\n\nshould return the wave field at position 'x' and angular frequency 'ω'\n\n\n\n\n\n","category":"type"},{"location":"library/base/#MultipleScattering.self_test","page":"Base","title":"MultipleScattering.self_test","text":"Check that the source functions return the correct types\n\n\n\n\n\nCheck that the discrete impulse vectors are the right sizes\n\n\n\n\n\nCheck that the continuous impulse functions return the correct types\n\n\n\n\n\n","category":"function"},{"location":"library/base/#Simulation-1","page":"Base","title":"Simulation","text":"","category":"section"},{"location":"library/base/#","page":"Base","title":"Base","text":"Simulation types and functions.","category":"page"},{"location":"library/base/#","page":"Base","title":"Base","text":"FrequencySimulation\nrun(::FrequencySimulation)\nrun(::FrequencySimulation, ::Rectangle, ::AbstractVector)\nFrequencySimulationResult\nforcing\nbasis_coefficients\nfield\nscattering_matrix\nt_matrix\nget_t_matrices","category":"page"},{"location":"library/base/#MultipleScattering.FrequencySimulation","page":"Base","title":"MultipleScattering.FrequencySimulation","text":"FrequencySimulation(medium::PhysicalProperties,\n                    [particles::AbstractParticles=[],]\n                    source::Source)\n\nBuild a FrequencySimulation. If particles are not provided, an empty array is used.\n\nAfter building, you can run the simulation to get a FrequencySimulationResult.\n\n\n\n\n\n","category":"type"},{"location":"library/base/#Base.run-Tuple{FrequencySimulation}","page":"Base","title":"Base.run","text":"run(sim::FrequencySimulation, x, ω; basis_order=5)\n\nRun the simulation sim for the position x and angular frequency ω.\n\nPosition can be an SVector or Vector{SVector} and frequency can be a float or vector of floats.\n\n\n\n\n\n","category":"method"},{"location":"library/base/#Base.run-Tuple{FrequencySimulation,Rectangle,AbstractArray{T,1} where T}","page":"Base","title":"Base.run","text":"run(sim::FrequencySimulation, rectangle;\n    res=20, xres=res, yres=res, basis_order=5)\n\nRun the simulation sim for a grid of positions in rectangle and for angular frequency ω.\n\nFrequency can be a float or vector of floats. The resolution of the grid points is defined by xres and yres.\n\n\n\n\n\n","category":"method"},{"location":"library/base/#MultipleScattering.FrequencySimulationResult","page":"Base","title":"MultipleScattering.FrequencySimulationResult","text":"Struct to hold results of a FrequencySimulation\n\n\n\n\n\n","category":"type"},{"location":"library/base/#MultipleScattering.forcing","page":"Base","title":"MultipleScattering.forcing","text":"forcing(source::Source, particles::AbstractParticles, ω::AbstractFloat, Nh::Integer)::Vector{Complex}\n\nCreate forcing vector from source, forms the right hand side of matrix equation to find basis_coefficients.\n\n\n\n\n\n","category":"function"},{"location":"library/base/#MultipleScattering.basis_coefficients","page":"Base","title":"MultipleScattering.basis_coefficients","text":"basis_coefficients(sim::FrequencySimulation, ω::AbstractFloat; basis_order::Int=5)::Matrix{Complex}\n\nReturn coefficients for bases around each particle for a given simulation and angular frequency (ω).\n\n\n\n\n\n","category":"function"},{"location":"library/base/#MultipleScattering.field","page":"Base","title":"MultipleScattering.field","text":"field(result::SimulationResult, [i::Integer, j::Integer])\n\nGet field from result, optionally specifying indices.\n\nReturns single value of/matrix of complex SVectors() if vector field, and complex float if scalar field.\n\n\n\n\n\n","category":"function"},{"location":"library/base/#MultipleScattering.scattering_matrix","page":"Base","title":"MultipleScattering.scattering_matrix","text":"Create the matrix S which will be inverted to find the scattering coefficients. Currently assumes 2D.\n\n\n\n\n\n","category":"function"},{"location":"library/base/#MultipleScattering.t_matrix","page":"Base","title":"MultipleScattering.t_matrix","text":"Returns a 2M+1 by 2M+1 T-matrix for particle with specific shape, physical properties in a medium with a specific physical property at a specific angular wavenumber. See doc/T-matrix.pdf for details.\n\n\n\n\n\n","category":"function"},{"location":"library/base/#MultipleScattering.get_t_matrices","page":"Base","title":"MultipleScattering.get_t_matrices","text":"Returns vector of T-matrices from a vector of particles in a specific domain. Can save computation if multiple of the same kind of particle are present in the vector.\n\n\n\n\n\n","category":"function"},{"location":"example/moments/README/#StatisticalMoments-1","page":"StatisticalMoments","title":"StatisticalMoments","text":"","category":"section"},{"location":"example/moments/README/#","page":"StatisticalMoments","title":"StatisticalMoments","text":"Here we are going to simulate the scattered wave for many different configurations of particles. We can then take the average and standard deviation (the moments) of the scattered wave. In statistical mechanics this process is called ensemble average.","category":"page"},{"location":"example/moments/README/#Choose-the-type-of-particles-1","page":"StatisticalMoments","title":"Choose the type of particles","text":"","category":"section"},{"location":"example/moments/README/#","page":"StatisticalMoments","title":"StatisticalMoments","text":"using MultipleScattering\n\nvolfrac = 0.01\nradius = 1.0\nnum_particles = 10\n\n# region to place the particles\nshape = Rectangle(volfrac, radius, num_particles)","category":"page"},{"location":"example/moments/README/#","page":"StatisticalMoments","title":"StatisticalMoments","text":"To see the region where the particle will be placed, and the receiver position:","category":"page"},{"location":"example/moments/README/#","page":"StatisticalMoments","title":"StatisticalMoments","text":"using Plots\npyplot()\nlistener = [-10.0, 0.0]\nplot(shape);\nscatter!([listener[1]],[listener[2]]);\nplot_shape = annotate!([(listener_position[1], listener_position[2] -2., \"Receiver\")])","category":"page"},{"location":"example/moments/README/#","page":"StatisticalMoments","title":"StatisticalMoments","text":"(Image: Plot of shape and receiver)","category":"page"},{"location":"example/moments/README/#Calculate-the-moments-of-the-scattered-wave-1","page":"StatisticalMoments","title":"Calculate the moments of the scattered wave","text":"","category":"section"},{"location":"example/moments/README/#","page":"StatisticalMoments","title":"StatisticalMoments","text":"The code below chooses a random (uniform distribution) configuration of particles inside shape and calculates the received signal at listener for wavenumbers k_arr,","category":"page"},{"location":"example/moments/README/#","page":"StatisticalMoments","title":"StatisticalMoments","text":"k_arr = collect(LinRange(0.01,1.0,100))\nsimulation = FrequencySimulation(volfrac,radius,k_arr; shape=shape, listener_positions = listener, seed = 1)\nplot(simulation)","category":"page"},{"location":"example/moments/README/#","page":"StatisticalMoments","title":"StatisticalMoments","text":"(Image: Plot of response against wavenumber)","category":"page"},{"location":"example/moments/README/#","page":"StatisticalMoments","title":"StatisticalMoments","text":"To see the position of the chosen particles:","category":"page"},{"location":"example/moments/README/#","page":"StatisticalMoments","title":"StatisticalMoments","text":"plot(plot_shape)\nplot!.(simulation.particles);\nplot!()","category":"page"},{"location":"example/moments/README/#","page":"StatisticalMoments","title":"StatisticalMoments","text":"(Image: Plot of the position of the particles)","category":"page"},{"location":"example/moments/README/#","page":"StatisticalMoments","title":"StatisticalMoments","text":"Now we will do simulations for particles placed in many different configurations and take the moments:","category":"page"},{"location":"example/moments/README/#","page":"StatisticalMoments","title":"StatisticalMoments","text":"simulations = [\n    FrequencySimulation(volfrac,radius,k_arr; shape=shape, listener_positions = listener, seed = i)\nfor i = 1:20]\nreal_moments = StatisticalMoments(simulations; response_apply=real) # moments of the real part\nplot(real_moments);\nplot!(xlabel=\"wavenumbers\", title=\"Moments of the real part\")","category":"page"},{"location":"example/moments/README/#","page":"StatisticalMoments","title":"StatisticalMoments","text":"(Image: Moments of the real part the scattered waves)","category":"page"},{"location":"example/moments/README/#Calculate-the-moments-of-the-scattered-wave-in-time-1","page":"StatisticalMoments","title":"Calculate the moments of the scattered wave in time","text":"","category":"section"},{"location":"example/moments/README/#","page":"StatisticalMoments","title":"StatisticalMoments","text":"time_simulations = TimeSimulation.(simulations)\ntime_simulations[1].time_arr # the time_arr chosen will be based on the discrete Fourier transform of simulations[1].k_arr\nreal_time_moments = StatisticalMoments(time_simulations; response_apply=real) # moments of the real part\nplot(real_time_moments,xlims=(0,300));\nplot!(xlabel=\"time\", title=\"Moments of the real part of the time wave\")","category":"page"},{"location":"example/moments/README/#","page":"StatisticalMoments","title":"StatisticalMoments","text":"(Image: Moments of the real part the scattered waves in time)","category":"page"},{"location":"example/moments/README/#References-1","page":"StatisticalMoments","title":"References","text":"","category":"section"},{"location":"example/moments/README/#","page":"StatisticalMoments","title":"StatisticalMoments","text":"A. L. Gower, R. M. Gower, J. Deakin, W. J. Parnell, I. D. Abrahams, Learning about random media from near-surface backscattering: using machine learning to measure particle size and concentration, arXiv preprint, (2018)1801.05490","category":"page"},{"location":"manual/plot/#Plotting-1","page":"Plotting","title":"Plotting","text":"","category":"section"},{"location":"manual/plot/#","page":"Plotting","title":"Plotting","text":"Here will be examples of videos and more...","category":"page"},{"location":"example/time_response_single_particle/README/#Time-response-from-single-particle-1","page":"Time response from single particle","title":"Time response from single particle","text":"","category":"section"},{"location":"library/acoustics/#Acoustic-1","page":"Acoustic","title":"Acoustic","text":"","category":"section"},{"location":"library/acoustics/#","page":"Acoustic","title":"Acoustic","text":"CurrentModule = MultipleScattering","category":"page"},{"location":"library/acoustics/#","page":"Acoustic","title":"Acoustic","text":"Acoustic type and functions.","category":"page"},{"location":"library/acoustics/#","page":"Acoustic","title":"Acoustic","text":"Acoustic\nimpedance\nsound_hard\nhard\nrigid\nzero_neumann\nsound_soft\nsoft\npressure_release\nzero_dirichlet\nplane_source\npoint_source","category":"page"},{"location":"library/acoustics/#MultipleScattering.Acoustic","page":"Acoustic","title":"MultipleScattering.Acoustic","text":"Acoustic{T<:AbstractFloat,Dim}(ρ::T, c::Complex{T})\nAcoustic(ρ::T, c::Union{T,Complex{AbstractFloat}}, Dim::Integer)\n\nPhysical properties for a homogenous isotropic acoustic medium with wavespeed (c) and density (ρ)\n\nSimulations in this medium produce scalar (1D) fields in Dim dimensions.\n\n\n\n\n\n","category":"type"},{"location":"library/acoustics/#MultipleScattering.impedance","page":"Acoustic","title":"MultipleScattering.impedance","text":"impedance(medium::Acoustic)\n\nCharacteristic specific acoustic impedance (z₀) of medium\n\n\n\n\n\n","category":"function"},{"location":"library/acoustics/#MultipleScattering.sound_hard","page":"Acoustic","title":"MultipleScattering.sound_hard","text":"sound_hard([T::Type = Float64,] Dim::Integer)\n\nConstruct physical properties of a sound hard acoustic object with type T and dimension Dim. Also known as rigid and equivalent to a zero_neumann pressure boundary condition.\n\n\n\n\n\n","category":"function"},{"location":"library/acoustics/#MultipleScattering.hard","page":"Acoustic","title":"MultipleScattering.hard","text":"hard(host_medium::Acoustic)\n\nSee sound_hard.\n\n\n\n\n\n","category":"function"},{"location":"library/acoustics/#MultipleScattering.rigid","page":"Acoustic","title":"MultipleScattering.rigid","text":"rigid(host_medium::Acoustic)\n\nSee sound_hard.\n\n\n\n\n\n","category":"function"},{"location":"library/acoustics/#MultipleScattering.zero_neumann","page":"Acoustic","title":"MultipleScattering.zero_neumann","text":"zero_neumann(host_medium::Acoustic)\n\nSee sound_hard.\n\n\n\n\n\n","category":"function"},{"location":"library/acoustics/#MultipleScattering.sound_soft","page":"Acoustic","title":"MultipleScattering.sound_soft","text":"sound_soft([T::Type = Float64,] Dim::Integer)\n\nConstruct physical properties of a sound hard acoustic object with type T and dimension Dim. Equivalent to a zero_dirichlet pressure boundary condition.\n\n\n\n\n\n","category":"function"},{"location":"library/acoustics/#MultipleScattering.soft","page":"Acoustic","title":"MultipleScattering.soft","text":"soft(host_medium::Acoustic)\n\nSee sound_soft.\n\n\n\n\n\n","category":"function"},{"location":"library/acoustics/#MultipleScattering.pressure_release","page":"Acoustic","title":"MultipleScattering.pressure_release","text":"pressure_release(host_medium::Acoustic)\n\nSee sound_soft.\n\n\n\n\n\n","category":"function"},{"location":"library/acoustics/#MultipleScattering.zero_dirichlet","page":"Acoustic","title":"MultipleScattering.zero_dirichlet","text":"zero_dirichlet(host_medium::Acoustic)\n\nSee sound_soft.\n\n\n\n\n\n","category":"function"},{"location":"library/acoustics/#MultipleScattering.plane_source","page":"Acoustic","title":"MultipleScattering.plane_source","text":"plane_source(medium::Acoustic, source_position, source_direction=[1,0], amplitude=1)::Source{Acoustic}\n\nCreate 2D Acoustic planar wave Source\n\n\n\n\n\n","category":"function"},{"location":"library/acoustics/#MultipleScattering.point_source","page":"Acoustic","title":"MultipleScattering.point_source","text":"point_source(medium::Acoustic, source_position, amplitude=1)::Source{Acoustic}\n\nCreate 2D Acoustic point Source (zeroth Hankel function of first type)\n\n\n\n\n\n","category":"function"},{"location":"manual/source/#Source-wave-1","page":"Source wave","title":"Source wave","text":"","category":"section"},{"location":"manual/source/#","page":"Source wave","title":"Source wave","text":"DocTestSetup = quote\n    using MultipleScattering\nend","category":"page"},{"location":"manual/source/#","page":"Source wave","title":"Source wave","text":"For acoustics, any wave field u(xy) that satisfies nabla^2 u(xy) + k^2 u(xy) = 0, with k = omegac, can be a source wave, also called an incident wave.","category":"page"},{"location":"manual/source/#D-Acoustics-1","page":"Source wave","title":"2D Acoustics","text":"","category":"section"},{"location":"manual/source/#","page":"Source wave","title":"Source wave","text":"Two common source waves are shown below.","category":"page"},{"location":"manual/source/#","page":"Source wave","title":"Source wave","text":"For a plane-wave of the form u(xy) = A mathrm e^mathrm i k mathbf n cdot (mathbf x - mathbf x_0), where A is the amplitude, mathbf n = (n_1n_2) is the direction of propagation, and mathbf x_0 = (x_0y_0) is the initially position of the source, we can use","category":"page"},{"location":"manual/source/#","page":"Source wave","title":"Source wave","text":"julia> medium = Acoustic(1.0, 1.0, 2);\n\njulia> A = 1.0;\n\njulia> n = [1.0,1.0];\n\njulia> x0 = [1.0,0.0];\n\njulia> source = plane_source(medium; amplitude = A, direction = n, position = x0);","category":"page"},{"location":"manual/source/#","page":"Source wave","title":"Source wave","text":"We can plot this source wave field for one frequency ω by using","category":"page"},{"location":"manual/source/#","page":"Source wave","title":"Source wave","text":"julia> simulation = FrequencySimulation(medium, source);\n\njulia> A = 1.0;\n\njulia> n = [1.0,1.0];\n\njulia> x0 = [1.0,0.0];\n\njulia> s = plane_source(medium; amplitude = A, direction = n, position = x0);","category":"page"},{"location":"manual/source/#","page":"Source wave","title":"Source wave","text":"plot(sim::FrequencySimulation{T}, ω::T;","category":"page"},{"location":"manual/source/#","page":"Source wave","title":"Source wave","text":"source_field(x,ω) = amp(ω)exp(imω/medium.c*dot(x-position, direction))","category":"page"},{"location":"manual/source/#","page":"Source wave","title":"Source wave","text":"sourceposition = SVector(0.0,1.0) amplitude = 1.0 s1 = pointsource(a2, sourceposition, amplitude) s2 = pointsource(a2, 2.0*source_position, amplitude)","category":"page"},{"location":"manual/source/#","page":"Source wave","title":"Source wave","text":"source = planesource(hostmedium; direction = [1.0,0.0])","category":"page"},{"location":"manual/intro/#Introduction-1","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"manual/intro/#Physical-properties-1","page":"Introduction","title":"Physical properties","text":"","category":"section"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"First define the host medium, for example for an acoustic medium in 2D","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"DocTestSetup = quote\n    using MultipleScattering, Plots\nend","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"julia> host_medium = Acoustic(2; ρ=1.0, c=1.0) # density ρ = 1.0 and soundspeed c = 1.0\nAcoustic(1.0, 1.0 + 0.0im, 2)","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"At this step we have restricted the physics to acoustics, that is, solutions to the Helmholtz equation: nabla^2 u(xyomega) + k^2 u(xyomega) = 0, where k = omegac, omega is the angular frequency and c the sound speed of the medium.","category":"page"},{"location":"manual/intro/#Source-wave-1","page":"Introduction","title":"Source wave","text":"","category":"section"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"The host medium will determine the types of waves that can propagate. For example an incident plane wave mathrm e^ mathrm i k x there is a convenient constructor","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"julia> source = plane_source(host_medium; direction = [1.0,0.0])\nSource{Acoustic{Float64,2},Float64}(getfield(MultipleScattering, Symbol(\"#source_field#134\")){Acoustic{Float64,2}}(Acoustic(1.0, 1.0 + 0.0im, 2), Core.Box([0.0, 0.0]), Core.Box([1.0, 0.0]), Core.Box(getfield(MultipleScattering, Symbol(\"#amp#133\")){Float64}(1.0))), getfield(MultipleScattering, Symbol(\"#source_coef#135\")){Float64,getfield(MultipleScattering, Symbol(\"#source_field#134\")){Acoustic{Float64,2}}}(Core.Box([1.0, 0.0]), getfield(MultipleScattering, Symbol(\"#source_field#134\")){Acoustic{Float64,2}}(Acoustic(1.0, 1.0 + 0.0im, 2), Core.Box([0.0, 0.0]), Core.Box([1.0, 0.0]), Core.Box(getfield(MultipleScattering, Symbol(\"#amp#133\")){Float64}(1.0)))))","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"note: Note\nOften mathrm e^ mathrm i k x - mathrm i omega t is considered to be a harmonic plane-wave travelling along the x-axis. We omit the part $ - \\mathrm i \\omega t$ as is common in frequency space.  ","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"We generally call the incident wave a source. See ... for more details on sources, and see Acoustic for some user functions for the Acoustic medium.","category":"page"},{"location":"manual/intro/#Particles-1","page":"Introduction","title":"Particles","text":"","category":"section"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"Next, we define some particles to scatter an acoustic wave. We choose two filled circles, the first centred at [-2,2] with radius 2 and the second at [-2,-2] with radius 0.5,","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"julia> particle_medium =  Acoustic(2; ρ=10.0, c=2.0); # 2D acoustic particle with density ρ = 10.0 and soundspeed c = 2.0\n\njulia> p1 = Particle(particle_medium, Circle([-2.0,2.0], 2.0))\nParticle(Acoustic(10.0, 2.0 + 0.0im, 2), Circle((-2.0, 2.0), 2.0))\n\njulia> p2 = Particle(particle_medium, Circle([-2.0,-2.0], 0.5))\nParticle(Acoustic(10.0, 2.0 + 0.0im, 2), Circle((-2.0, -2.0), 0.5))\n\njulia> particles = [p1,p2];","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"See Shapes and particles for details on different shapes and particles.","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"If you have the package Plots installed you can plot the particles. Note that although they appear hollow, we consider them to filled with the same homogenous material.","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"julia> using Plots; pyplot();\n\njulia> plot(particles);","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"note: Note\nMost things in this package can be plotted just by typing plot(thing). However you need to have Plots installed, and you may need to use the backend pyplot(). See Plotting for details on plotting.","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"(Image: Plot of response against wavenumber)","category":"page"},{"location":"manual/intro/#Simulation-and-results-1","page":"Introduction","title":"Simulation and results","text":"","category":"section"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"Once we know the medium, the particles, and the have these three components, we can build our FrequencySimulation object","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"julia> simulation = FrequencySimulation(host_medium, particles, source);","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"To get numerical results, we run our simulation for specific positions and angular frequencies,","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"julia> x = [[-10.0,0.0], [0.0,0.0]];\n\njulia> max_ω = 1.0;\n\njulia> ωs = 0.01:0.01:max_ω;\n\njulia> result = run(simulation, x, ωs)\nFrequencySimulationResult{Float64,2,1}(StaticArrays.SArray{Tuple{1},Complex{Float64},1,1}[[0.994392-0.104397im] [0.978268-0.208588im] … [-1.06945+0.63946im] [-1.02078+0.718273im]; [0.999399+0.00871927im] [0.998124+0.016943im] … [0.682284-0.186062im] [0.68494-0.187657im]], StaticArrays.SArray{Tuple{2},Float64,1,2}[[-10.0, 0.0], [0.0, 0.0]], [0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1  …  0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99, 1.0])","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"We can plot the time-harmonic response across the frequencies ωs wavenumbers and at the location (-10,0) by typing:","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"julia> plot(result)","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"(Image: Plot of response against wavenumber)","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"For a better overview you can calculate the response for lots of points x in the domain and then plot the whole field for one frequency ω by typing:","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"julia> ω = 0.8;\n\njulia> plot(simulation, ω);\n\njulia> plot!(particles)","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"(Image: Plot real part of acoustic field)","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"For details on plot fields and videos see Plotting.","category":"page"},{"location":"manual/intro/#Results-in-time-1","page":"Introduction","title":"Results in time","text":"","category":"section"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"If we have calculated a response u(omega) over a range of frequencies omega, then we can use a Discrete Fourier transform to calculate the response in time U(t). That is, we can calculate U(t) by approximating the Fourier transform:","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"U(t) = frac12pi int_-infty^infty u(omega)mathrm e^-mathrm i omega t domega","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"For details see the section on Time response. For example, taking a Discrete Fourier transform of the previous response leads to an incident plane wave pulse in time:","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"julia> time_result = frequency_to_time(result);\n\njulia> plot(time_result)","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"(Image: Plot real part of acoustic field)","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"In the image above the first peak on the left is due to the incident wave (the source), and the second peak is the wave scattered by theparticles. Note how both peaks are quite jagged. This is due to Gibb's phenomena. To resolve this we can use a Gaussian impulse function shown below. See Time response for more details.","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"julia> t_vec = LinRange(0.,700.,400);\n\njulia> gauss_time_result = frequency_to_time(result; t_vec = t_vec, impulse = GaussianImpulse(max_ω));\n\njulia> plot(gauss_time_result)","category":"page"},{"location":"manual/intro/#","page":"Introduction","title":"Introduction","text":"(Image: Plot real part of acoustic field)","category":"page"},{"location":"example/README/#Examples-1","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"example/README/#[Simple-random-particles](random_particles/README.md)-1","page":"Examples","title":"Simple random particles","text":"","category":"section"},{"location":"example/README/#","page":"Examples","title":"Examples","text":"Simple example of random particles in rectangle","category":"page"},{"location":"example/README/#[Two-particles](two_particles/README.md)-1","page":"Examples","title":"Two particles","text":"","category":"section"},{"location":"example/README/#","page":"Examples","title":"Examples","text":"Specify particle positions manually\nGive different particles different radii and different material properties","category":"page"},{"location":"example/README/#[Lens](lens/README.md)-1","page":"Examples","title":"Lens","text":"","category":"section"},{"location":"example/README/#","page":"Examples","title":"Examples","text":"Use the shape functions to create particles in a new geometry\nSee time response from a semi-circular wall","category":"page"},{"location":"example/README/#[Random-particles-in-a-circle](particles_in_circle/README.md)-1","page":"Examples","title":"Random particles in a circle","text":"","category":"section"},{"location":"example/README/#","page":"Examples","title":"Examples","text":"Generate random particles in a circle","category":"page"},{"location":"example/README/#[Make-a-gif-of-harmonic-scattering](plot/README.md)-1","page":"Examples","title":"Make a gif of harmonic scattering","text":"","category":"section"},{"location":"example/README/#","page":"Examples","title":"Examples","text":"Generate random particles in a circle","category":"page"},{"location":"example/README/#[StatisticalMoments](moments/README.md)-1","page":"Examples","title":"StatisticalMoments","text":"","category":"section"},{"location":"example/README/#","page":"Examples","title":"Examples","text":"How to extract statistical information from a batch of simulations, in this case: mean, standard deviation, skew and kurtosis (also known as moments).","category":"page"},{"location":"example/README/#[Near-surface-backscattering](near_surface_backscattering/README.md)-1","page":"Examples","title":"Near surface backscattering","text":"","category":"section"},{"location":"example/README/#","page":"Examples","title":"Examples","text":"A method to calculate the backscattering from an infinite halfspace.\nSee backscattering in frequency and time.","category":"page"},{"location":"example/random_particles_in_circle/README/#Random-particles-in-a-circle-1","page":"Random particles in a circle","title":"Random particles in a circle","text":"","category":"section"},{"location":"example/random_particles_in_circle/README/#","page":"Random particles in a circle","title":"Random particles in a circle","text":"The code particlesincircle.jl compares the scattered wave from one big circle, with the scattered wave from a circle filled with small particles.","category":"page"},{"location":"example/random_particles_in_circle/README/#","page":"Random particles in a circle","title":"Random particles in a circle","text":"using MultipleScattering\n\nk_arr = collect(LinRange(0.1,1.0,10))\n\n# You can also pick your own shape, an generate random particles inside it\n# with a certain radius ands volume fraction\nradius = 0.3\nvolfrac = 0.45\ncentre = [0.,0.]\nbig_radius = 3.0\n\ncircle = Circle(big_radius,centre)\ncircle_simulation = FrequencySimulation(volfrac,radius,k_arr;shape=circle)","category":"page"},{"location":"example/random_particles_in_circle/README/#","page":"Random particles in a circle","title":"Random particles in a circle","text":"The particles chosen are impenetrable, i.e. the wave is 100\\% reflected. So this circle filled with scatterers should act like one big particle.","category":"page"},{"location":"example/random_particles_in_circle/README/#","page":"Random particles in a circle","title":"Random particles in a circle","text":"big_particle = Particle(centre,big_radius)\nbig_particle_simulation = FrequencySimulation([big_particle], k_arr; hankel_order=15)\n\nusing Plots\nplot(\n    plot(circle_simulation,0.5; drawshape=true, drawlisteners =false),\n    plot(big_particle_simulation,0.5; drawlisteners =false),\n    layout = (2,1)\n)","category":"page"},{"location":"example/random_particles_in_circle/README/#","page":"Random particles in a circle","title":"Random particles in a circle","text":"(Image: The field comparison)","category":"page"},{"location":"example/random_particles_in_circle/README/#","page":"Random particles in a circle","title":"Random particles in a circle","text":"If we compare the response measured at the listener [-10., 0.], they should be very similar:","category":"page"},{"location":"example/random_particles_in_circle/README/#","page":"Random particles in a circle","title":"Random particles in a circle","text":"plot(circle_simulation)\nplot!(big_particle_simulation,title=\"Compare scattered wave from one big particle, \\n and a circle filled with small particles\")","category":"page"},{"location":"example/random_particles_in_circle/README/#","page":"Random particles in a circle","title":"Random particles in a circle","text":"(Image: The response comparison)","category":"page"},{"location":"example/lens/README/#Lens-1","page":"Lens","title":"Lens","text":"","category":"section"},{"location":"example/lens/README/#","page":"Lens","title":"Lens","text":"the code lens.jl arranges particles into the shape of lens. The lens is shaped so that the incident plane wave is completely focused into one point: the listener position.","category":"page"},{"location":"example/lens/README/#","page":"Lens","title":"Lens","text":"include(\"lens.jl\")\nplot_lens()","category":"page"},{"location":"example/lens/README/#","page":"Lens","title":"Lens","text":"(Image: Plot lens shape and response in time)","category":"page"},{"location":"example/lens/README/#","page":"Lens","title":"Lens","text":"The distance of the lens is chosen so that the peak signal should arrive around time 34. Note, as we use a random seed to position the particles, the above figure many vary slightly.","category":"page"},{"location":"#MultipleScattering.jl-Documentation-1","page":"Home","title":"MultipleScattering.jl Documentation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"A Julia library for simulating, processing, and plotting multiple scattering of acoustic waves.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The library uses the multipole method to solve the Helmholtz equation (time-harmonic waves). The multipole method is particularly efficient at solving scattering problems for particles in an infinite domain. This library is configured to use T-matrices to represent scattering from particles with any shape and properties. The package is setup to deal with different spatial dimensions and types of waves which satisfy Helmholtz equation's, e.g. acoustics, electromagnetism, elasticity. For details on some of the maths see Martin (1995) and Gower et al. (2017).","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Install Julia v1.0 or later, then run","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Pkg.clone(\"https://github.com/jondea/MultipleScattering.jl.git\")\nusing MultipleScattering","category":"page"},{"location":"#Manual-1","page":"Home","title":"Manual","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"You can learn to use this package through examples or through our manual.","category":"page"},{"location":"#Contents-1","page":"Home","title":"Contents","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\"base.md\", \"acoustics.md\",\"random.md\"]\nDepth = 2","category":"page"},{"location":"library/random/#Random-1","page":"Random","title":"Random","text":"","category":"section"},{"location":"library/random/#","page":"Random","title":"Random","text":"CurrentModule = MultipleScattering","category":"page"},{"location":"library/random/#Random-particles-1","page":"Random","title":"Random particles","text":"","category":"section"},{"location":"library/random/#","page":"Random","title":"Random","text":"random_particles","category":"page"},{"location":"library/random/#MultipleScattering.random_particles","page":"Random","title":"MultipleScattering.random_particles","text":"random_particles(particle_medium, particle_shapes::Vector{Shape}, box_shape, volume_fraction::Number;\n    seed=Random.make_seed())\nrandom_particles(particle_medium, particle_shape::Shape, box_shape, volume_fraction::Number;\n    seed=Random.make_seed())\nrandom_particles(particle_medium, particle_shape::Shape, box_shape, N::Integer;\n    seed=Random.make_seed())\n\nGenerate N random particles that fit inside box_shape (or fill with volume_fraction)\n\nSpecify seed to make output deterministic. Algorithm places particles unifomly randomly inside the bounding rectangle of box_shape and discards particle if it overlaps (based on outer radius) or does not lies completely in box box.\n\nWhen passing particle_shapes::Vector{Shape} we assume each element is equally likely to occur. Repeating the same shape will lead to it being placed more often.\n\n\n\n\n\n","category":"function"},{"location":"library/random/#Moments-1","page":"Random","title":"Moments","text":"","category":"section"},{"location":"library/random/#","page":"Random","title":"Random","text":"statistical_moments","category":"page"},{"location":"library/random/#MultipleScattering.statistical_moments","page":"Random","title":"MultipleScattering.statistical_moments","text":"statistical_moments(results, n; applytofield=real)::Vector{Matrix}\n\nCalculate moments up to n of results at each position and wavenumber/time, after applying applytofield.\n\n\n\n\n\n","category":"function"}]
}
